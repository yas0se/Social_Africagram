// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://neondb_owner:KyZzpvY1iJ5B@ep-morning-mud-a2t5koak.eu-central-1.aws.neon.tech/africagram?sslmode=require"
}


model Utilisateur {
  id               Int       @id @default(autoincrement())
  id_profile       Int
  firstname        String
  lastname         String
  email            String    @unique
  password         String
  isAdmin          Boolean   @default(false)
  date_creation    DateTime  @default(now())
  date_modification DateTime @updatedAt
  profiles         Profile[]
  posts            Post[]
  aimes            Aime[]
  commentaires     Commentaire[]
  following        Follower[] @relation("Following")
  followers        Follower[] @relation("Follower")
}

model Profile {
  id               Int       @id @default(autoincrement())
  id_utilisateur   Int
  sexe             String
  pays             String
  ville            String
  date_creation    DateTime  @default(now())
  date_modification DateTime @updatedAt
  utilisateur      Utilisateur @relation(fields: [id_utilisateur], references: [id])
}

model Post {
  id               Int       @id @default(autoincrement())
  utilisateur_id   Int
  caption          String
  date_creation    DateTime  @default(now())
  date_modification DateTime @updatedAt
  utilisateur      Utilisateur @relation(fields: [utilisateur_id], references: [id])
  aimes            Aime[]
  commentaires     Commentaire[]
}

model Aime {
  id               Int       @id @default(autoincrement())
  utilisateur_id   Int
  post_id          Int
  date_creation    DateTime  @default(now())
  utilisateur      Utilisateur @relation(fields: [utilisateur_id], references: [id])
  post             Post @relation(fields: [post_id], references: [id])
}

model Commentaire {
  id               Int       @id @default(autoincrement())
  utilisateur_id   Int
  post_id          Int
  message          String
  date_creation    DateTime  @default(now())
  utilisateur      Utilisateur @relation(fields: [utilisateur_id], references: [id])
  post             Post @relation(fields: [post_id], references: [id])
}

model Follower {
  id               Int       @id @default(autoincrement())
  following_id     Int
  follower_id      Int
  date_creation    DateTime  @default(now())
  following        Utilisateur @relation("Following", fields: [following_id], references: [id])
  follower         Utilisateur @relation("Follower", fields: [follower_id], references: [id])
}